buildscript {
  dependencies {
    classpath("org.flywaydb:flyway-database-postgresql:10.17.0")
  }
}

plugins {
  id 'application'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.1.5'
  id 'org.springframework.boot' version '3.2.0'
  id 'com.github.ben-manes.versions' version '0.51.0'
  id 'org.sonarqube' version '5.0.0.4638'
  id 'org.flywaydb.flyway' version '10.17.0'
  id 'net.serenity-bdd.serenity-gradle-plugin' version '4.0.46'
  /*
    Applies analysis tools including checkstyle and OWASP Dependency checker.
    See https://github.com/hmcts/gradle-java-plugin
 */
  id 'uk.gov.hmcts.java' version '0.12.63'
}

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }
}

configurations {
  functionalTestImplementation.extendsFrom testImplementation
  functionalTestRuntimeOnly.extendsFrom runtimeOnly

  integrationTestImplementation.extendsFrom testImplementation
  integrationTestRuntimeOnly.extendsFrom runtimeOnly

  smokeTestImplementation.extendsFrom testImplementation
  smokeTestRuntimeOnly.extendsFrom runtimeOnly
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

// https://github.com/gradle/gradle/issues/16791
tasks.withType(JavaExec).configureEach {
  javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

test {
  failFast = true
}

task integration(type: Test) {
  description = "Runs integration tests"
  group = "Verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  failFast = true
}

task functionalOpal(type: Test) {

  description = "Runs functional tests against Opal mode"
  group = "Verification"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
  reports.junitXml.getOutputLocation().set(layout.buildDirectory.dir("test-results/functional"))
  testLogging.showStandardStreams = true
  gradle.startParameter.continueOnFailure = true
  systemProperty "cucumber.filter.tags", "@Opal and not @Smoke and not @Ignore"
  systemProperty "test.mode", "opal"
}
task functionalLegacy(type: Test) {
  description = "Runs functional tests against Legacy mode"
  group = "Verification"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
  reports.junitXml.getOutputLocation().set(layout.buildDirectory.dir("test-results/functional"))
  gradle.startParameter.continueOnFailure = true
  testLogging.showStandardStreams = true
  systemProperty "cucumber.filter.tags", "@Legacy and not @Smoke and not @Ignore"
  systemProperty "test.mode", "legacy"
}
task copyFunctionalReport(type: Copy) {
  from("${rootDir}/target/site/serenity")
  into("${rootDir}/functional-test-report")
  logger.quiet("Functional Test Report available at - file://${rootDir}/functional-test-report/index.html")
}

task functional() {
  description = "Runs functional tests"
  group = "Verification"
  gradle.startParameter.continueOnFailure = true
  dependsOn('clearReports', 'functionalOpal', 'functionalLegacy', 'aggregate', 'copyFunctionalReport')
  tasks.functionalOpal.mustRunAfter clearReports
  tasks.functionalLegacy.mustRunAfter functionalOpal
  tasks.aggregate.mustRunAfter functionalLegacy
  tasks.copyFunctionalReport.mustRunAfter aggregate

}
task smokeOpal(type: Test) {
  description = "Runs Smoke Tests"
  group = "Verification"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
  reports.junitXml.getOutputLocation().set(layout.buildDirectory.dir("test-results/smoke"))
  testLogging.showStandardStreams = true
  gradle.startParameter.continueOnFailure = true
  systemProperty "cucumber.filter.tags", "@Smoke and not @Ignore"
}
task copySmokeReport(type: Copy) {
  from("${rootDir}/target/site/serenity")
  into("${rootDir}/smoke-test-report")
  logger.quiet("Smoke Test Report available at - file://${rootDir}/smoke-test-report/index.html")
}

task smoke() {
  description = "Runs Smoke Tests"
  group = "Verification"
  gradle.startParameter.continueOnFailure = true
  dependsOn('clearReports', 'smokeOpal', 'aggregate', 'copySmokeReport')
  tasks.smokeOpal.mustRunAfter clearReports
  tasks.aggregate.mustRunAfter smokeOpal
  tasks.copySmokeReport.mustRunAfter aggregate

}

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.required = true
    csv.required = false
    html.required = true
  }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport
project.tasks['check'].dependsOn integration

sonarqube {
  properties {
    property "sonar.projectName", "Reform :: opal-user-service"
    property "sonar.projectKey", "uk.gov.hmcts.reform:opal-user-service"
  }
}

dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

dependencyManagement {
  imports {
    mavenBom 'org.springframework.cloud:spring-cloud-dependencies:2023.0.3'
  }

  imports {
    mavenBom "org.springframework.integration:spring-integration-bom:6.3.2"
  }

  dependencies {
    dependency group: 'com.google.guava', name: 'guava', version: '33.2.1-jre'
  }
}

dependencyCheck {
  suppressionFile = 'config/owasp/suppressions.xml'
}

repositories {
  mavenLocal()
  mavenCentral()
  maven { url 'https://jitpack.io' }
}

ext {
  log4JVersion = "2.23.1"
  serenityVersion = "4.1.20"
  logbackVersion = "1.5.6"
}

ext['snakeyaml.version'] = '2.0'

dependencies {
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-security'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-oauth2-client'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-jdbc'
  implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.6.0'

  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-integration'
  implementation group: 'org.springframework.integration', name: 'spring-integration-sftp'
  implementation group: 'org.springframework.integration', name: 'spring-integration-file'

  implementation group: 'org.springframework.security', name: 'spring-security-oauth2-authorization-server', version: '1.3.1'
  implementation group: 'org.springframework', name: 'spring-aspects'

  implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: '6.1.5'

  implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: log4JVersion
  implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: log4JVersion
  implementation group: 'ch.qos.logback', name: 'logback-classic', version: logbackVersion
  implementation group: 'ch.qos.logback', name: 'logback-core', version: logbackVersion

  implementation group: 'io.rest-assured', name: 'rest-assured'
  implementation 'org.flywaydb:flyway-core'
  runtimeOnly 'org.flywaydb:flyway-database-postgresql:10.17.0'
  implementation 'org.postgresql:postgresql'

  compileOnly 'org.projectlombok:lombok:1.18.34'
  annotationProcessor 'org.projectlombok:lombok:1.18.34'
  annotationProcessor 'org.hibernate:hibernate-jpamodelgen:6.5.2.Final'

  testCompileOnly 'org.projectlombok:lombok:1.18.34'
  testAnnotationProcessor 'org.projectlombok:lombok:1.18.34'

  implementation group: 'org.apache.xmlgraphics', name: 'fop', version: '2.9'
  implementation group: 'org.apache.xmlgraphics', name: 'fop-core', version: '2.9'
  implementation group: 'org.apache.xmlgraphics', name: 'fop-events', version: '2.9'
  implementation group: 'org.apache.xmlgraphics', name: 'xmlgraphics-commons', version: '2.9'
  implementation group: 'org.apache.pdfbox', name: 'pdfbox', version: '2.0.32'
  implementation group: 'net.sf.saxon', name: 'Saxon-HE', version: '12.5'

  testImplementation 'com.github.fge:json-schema-validator:2.2.14'
  testImplementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
  testImplementation 'org.springframework.boot:spring-boot-devtools'
  testImplementation 'org.springframework.boot:spring-boot-testcontainers'
  testImplementation 'org.testcontainers:postgresql'
  
  testImplementation(platform('org.junit:junit-bom:5.10.3'))
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
    exclude group: 'junit', module: 'junit'
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }
  testImplementation 'org.junit.platform:junit-platform-suite:1.10.3'
  testImplementation 'io.cucumber:cucumber-junit-platform-engine:7.18.1'

  testImplementation "net.serenity-bdd:serenity-core:${serenityVersion}"
  testImplementation "net.serenity-bdd:serenity-rest-assured:${serenityVersion}"
  testImplementation "net.serenity-bdd:serenity-report-resources:${serenityVersion}"

  testImplementation "net.serenity-bdd:serenity-cucumber:${serenityVersion}"
  testImplementation "net.serenity-bdd:serenity-ensure:${serenityVersion}"
}

mainClassName = 'uk.gov.hmcts.reform.opal.Application'

bootJar {
  archiveFileName = "opal-user-service.jar"

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

// Gradle 7.x issue, workaround from: https://github.com/gradle/gradle/issues/17236#issuecomment-894768083
rootProject.tasks.named("processSmokeTestResources") {
  duplicatesStrategy = 'include'
}

rootProject.tasks.named("processFunctionalTestResources") {
  duplicatesStrategy = 'include'
}

rootProject.tasks.named("processIntegrationTestResources") {
  duplicatesStrategy = 'include'
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

flyway {
  url = System.getenv('FLYWAY_URL')
  user = System.getenv('FLYWAY_USER')
  password = System.getenv('FLYWAY_PASSWORD')
  baselineOnMigrate = true
  baselineVersion = '000'
}

task migratePostgresDatabase(type: org.flywaydb.gradle.task.FlywayMigrateTask) {
  baselineOnMigrate = true
  if (project.hasProperty("dburl")) {
    url = "jdbc:postgresql://${dburl}"
  }
  println "Flyway jbdc property 'url' (derived from System property 'FLYWAY_URL'?) is: ${url}"
}
